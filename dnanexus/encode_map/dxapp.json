{
  "name": "encode_map",
  "title": "ENCODE Map",
  "summary": "Map reads with BWA, optionally after cropping",
  "dxapi": "1.0.0",
  "version": "0.0.1",
  "categories": [
    "ENCODE Analysis Pipeline"
  ],
  "inputSpec": [
    {
      "name": "reads1",
      "label": "Forward reads (SE or PE)",
      "patterns": ["*.fastq", "*.fastq.gz", "*.fq", "*.fq.gz"],
      "class": "file"
    },
    {
      "name": "reads2",
      "label": "Reverse reads (PE)",
      "patterns": ["*.fastq", "*.fastq.gz", "*.fq", "*.fq.gz"],
      "class": "file",
      "optional": true
    },
    {
      "name": "crop_length",
      "label": "native or length to crop reads",
      "class": "string",
      "optional": true,
      "default": "native"
    },
    {
      "name": "hard_crop",
      "label": "If true and if crop_length then discard reads less than crop_length",
      "class": "boolean",
      "optional": true,
      "default": true
    },
    {
      "name": "reference_tar",
      "label": "Reference files for bwa",
      "patterns": ["*.tar", "*.tar.gz", "*.tgz"],
      "class": "file"
    },
    {
      "name": "bwa_aln_params",
      "label": "Command-line parameters to BWA aln",
      "class": "string",
      "optional": true,
      "default": "-q 5 -l 32 -k 2"
    },
    {
      "name": "debug",
      "label": "debug mode",
      "class": "boolean",
      "optional": true,
      "default": false
    }
  ],
  "outputSpec": [
    {
      "name": "mapped_reads",
      "label": "Mapped reads",
      "class": "file"
    },
    {
      "name": "mapping_statistics",
      "label": "Mapping statistics",
      "class": "file"
    },
    {
      "name": "paired_end",
      "label": "True if input reads were PE",
      "class": "boolean"
    },
    {
      "name": "n_mapped_reads",
      "label": "Number of mapped reads",
      "class": "int"
    },
    {
      "name": "crop_length",
      "label": "native or length to crop reads",
      "class": "string"
    }
  ],
  "runSpec": {
    "interpreter": "python2.7",
    "file": "src/encode_map.py",
    "distribution": "Ubuntu", "release": "14.04",
    "execDepends": [],
    "systemRequirements": {
      "main":        {"instanceType": "mem2_hdd2_x1"},
      "crop":        {"instanceType": "mem3_ssd1_x32"},
      "process":     {"instanceType": "mem3_ssd1_x32"},
      "postprocess": {"instanceType": "mem3_hdd2_x4"}
    },
    "assetDepends": [
          {
            "name": "common_asset",
            "_comment": "ChIPv2-dev",
            "project": "project-FB3YPP00jjb547qG1V9Y0Q9Y",
            "version": "0.0.1",
            "folder": "/ChIP-seq/assets/"
          },
          {
            "name": "bedtools_asset",
            "_comment": "ChIPv2-dev",
            "project": "project-FB3YPP00jjb547qG1V9Y0Q9Y",
            "version": "0.0.1",
            "folder": "/ChIP-seq/assets/"
          },
          {
            "name": "samtools_asset",
            "_comment": "ChIPv2-dev",
            "project": "project-FB3YPP00jjb547qG1V9Y0Q9Y",
            "version": "0.0.1",
            "folder": "/ChIP-seq/assets/"
          },
          {
            "name": "trimmomatic_asset",
            "_comment": "ChIPv2-dev",
            "project": "project-FB3YPP00jjb547qG1V9Y0Q9Y",
            "version": "0.0.1",
            "folder": "/ChIP-seq/assets/"
          },
          {
            "name": "bwa_asset",
            "_comment": "ChIPv2-dev",
            "project": "project-FB3YPP00jjb547qG1V9Y0Q9Y",
            "version": "0.0.1",
            "folder": "/ChIP-seq/assets/"
          }
    ]
  },
  "authorizedUsers": [],
  "access": {
    "network": ["*"]
  }
}
